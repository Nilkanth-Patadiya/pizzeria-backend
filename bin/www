#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app")
var debug = require("debug")("pizzeria-backend:server")
var http = require("http")
var mongoose = require("mongoose")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000")
app.set("port", port)

mongoose
  .connect(process.env.MONGODB_URI, {
    dbName: "pizzeria",
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(
    () => console.log("connected to MongoDb via mongoose"),
    (error) => {
      throw error
    }
  )

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on("error", onError)
server.on("listening", onListening)

//handle graceful exit
const handleExit = () => {
  console.info("SIGTERM or SIGINT signal received.")
  console.log("Closing http server.")
  server.close(() => {
    console.log("Http server closed.")
    // boolean means [force], see in mongoose doc
    mongoose.connection.close(false, () => {
      console.log("MongoDb connection closed.")
      process.exit(0)
    })
  })
}
process.on("SIGTERM", handleExit)
process.on("SIGINT", handleExit)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  debug("Listening on " + bind)
}
